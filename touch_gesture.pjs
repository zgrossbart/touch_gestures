/******************************************************************************* 
 * 
 * Copyright 2011 Zack Grossbart 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

var touchStart;

var scale = 0;
var direction = true;
var started = false;
var count = 0;
var gestures = [];
var gesture;
var gIndex = 0;

function Gesture() {
    this.starts = [];
    this.paths = [];
    this.pathsDrawn = [];
    this.index = 0;
    this.longPath;
    this.hasPlayed = false;
    
    this.create = function(/*array*/ paths, /*Point*/ textPoint, /*String*/ name) {
        this.paths = paths;
        
        for (var i = 0; i < this.paths.length; i++) {
            this.pathsDrawn.push(new Path());
            this.pathsDrawn[i].strokeColor = '#ff0000';
            this.pathsDrawn[i].strokeWidth = 5;
            this.pathsDrawn[i].strokeCap = 'round';
            this.pathsDrawn[i].dashArray = [8, 10];
            
            this.starts.push(createDot(this.paths[i].getPointAt(0)));
            this.starts[i].opacity = 0;
            
            if (this.longPath == null || this.longPath.length < this.paths[i].length) {
                this.longPath = this.paths[i];
            }
        }
        
        this.text = new PointText(textPoint);
        this.text.content = name;
        this.text.characterStyle =  {
            fontSize: 18,
            fillColor: 'red',
            font: 'sans'
        };
        this.text.paragraphStyle.justification = 'center';
        this.text.opacity = 0;
    }
    
    this.draw = function() {
        if (!this.hasPlayed) {
            this.hasPlayed = true;
            for (var i = 0; i < this.paths.length; i++) {
                this.starts[i].opacity = 1;
            }
        } else {
            this.replay();
        }
    }
    
    this.hide = function() {
        for (var i = 0; i < this.paths.length; i++) {
            this.starts[i].opacity = 0;
            this.pathsDrawn[i].visible = false;
        }
        
        this.text.opacity = 0;
    }
    
    this.replay = function() {
        for (var i = 0; i < this.paths.length; i++) {
            this.pathsDrawn[i].remove();
            
            this.pathsDrawn[i] = new Path();
            this.pathsDrawn[i].strokeColor = '#ff0000';
            this.pathsDrawn[i].strokeWidth = 5;
            this.pathsDrawn[i].strokeCap = 'round';
            this.pathsDrawn[i].dashArray = [8, 10];
            
            this.starts[i].opacity = 1;
            this.starts[i].position = this.paths[i].getPointAt(0);
            
            this.pathsDrawn[i].moveBelow(this.starts[i]);
        }
        
        this.text.opacity = 0;
        this.index = 0;
    }
    
    this.bump = function() {
        this.index += 4;
        
        if (this.index < this.longPath.length) {
            for (var i = 0; i < this.paths.length; i++) {
                if (this.index < this.paths[i].length) {
                    this.pathsDrawn[i].add(this.paths[i].getPointAt(this.index));
                    this.starts[i].position = this.paths[i].getPointAt(this.index);
                }
            }
        } 
        
        if (this.index >= this.longPath.length && this.text.opacity < 1) {
            this.text.opacity = 1;
        }
    }
}

function createDot(/*Point*/ point) {
    var dot = new Path.Circle(point, 10);
    dot.fillColor = 'lightgray';
    //dot.opacity = 0.5;
    dot.strokeColor = 'gray';
    dot.strokeWidth = 2;
    
    return dot;
}

function pinch() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(275, 25));
    path.add(new Point(150, 150));
    paths.push(path);
    
    path = new Path();
    path.add(new Point(25, 275));
    path.add(new Point(150, 150));
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, 50, "Pinch");
    
    return g;
}

function swipe() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(250, 50));
    path.add(new Point(50, 50));
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 150), "Swipe");
    
    return g;
}

function square() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(150, 50));
    path.add(new Point(50, 50));
    path.add(new Point(50, 250));
    path.add(new Point(150, 250));
    paths.push(path);
    
    var path = new Path();
    path.add(new Point(150, 50));
    path.add(new Point(250, 50));
    path.add(new Point(250, 250));
    path.add(new Point(150, 250));
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 150), "You Are Square");
    
    return g;
}

function zoom() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(150, 150));
    path.add(new Point(275, 25));
    paths.push(path);
    
    path = new Path();
    path.add(new Point(150, 150));
    path.add(new Point(25, 275));
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, 50, "Zoom");
    
    return g;
}

function scroll() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(50, 50));
    path.add(new Point(50, 250));
    paths.push(path);
    
    path = new Path();
    path.add(new Point(250, 50));
    path.add(new Point(250, 250));
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 150), "Scroll");
    
    return g;
}

function rotate() {
    var paths = [];
    
    var path = new Path();
    var firstPoint = new Point(150, 50);
    path.add(firstPoint);
    
    var throughPoint = new Point(225, 75);
    var toPoint = new Point(250, 150);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    path = new Path();
    var firstPoint = new Point(150, 250);
    path.add(firstPoint);
    
    var throughPoint = new Point(75, 225);
    var toPoint = new Point(50, 150);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 150), "Rotate");
    
    return g;
}

function alien() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(100, 100));
    path.add(new Point(100, 100));
    paths.push(path);
    
    path = new Path();
    path.add(new Point(150, 50));
    path.add(new Point(150, 50));
    paths.push(path);
    
    path = new Path();
    path.add(new Point(200, 100));
    path.add(new Point(200, 100));
    paths.push(path);
    
    path = new Path();
    var firstPoint = new Point(50, 200);
    path.add(firstPoint);
    
    var throughPoint = new Point(150, 225);
    var toPoint = new Point(250, 200);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 150), "Alien");
    
    return g;
}

function happy() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(100, 100));
    path.add(new Point(100, 100));
    paths.push(path);
    
    path = new Path();
    path.add(new Point(200, 100));
    path.add(new Point(200, 100));
    paths.push(path);
    
    path = new Path();
    var firstPoint = new Point(50, 200);
    path.add(firstPoint);
    
    var throughPoint = new Point(150, 225);
    var toPoint = new Point(250, 200);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 150), "Happy");
    
    return g;
}

function wink() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(100, 100));
    path.add(new Point(100, 100));
    paths.push(path);
    
    path = new Path();
    path.add(new Point(200, 100));
    path.add(new Point(250, 100));
    paths.push(path);
    
    path = new Path();
    var firstPoint = new Point(50, 200);
    path.add(firstPoint);
    
    var throughPoint = new Point(150, 225);
    var toPoint = new Point(250, 200);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 150), "Wink");
    
    return g;
}

function sad() {
    var paths = [];
    
    var path = new Path();
    path.add(new Point(100, 100));
    path.add(new Point(100, 100));
    paths.push(path);
    
    path = new Path();
    path.add(new Point(200, 100));
    path.add(new Point(200, 100));
    paths.push(path);
    
    path = new Path();
    var firstPoint = new Point(50, 200);
    path.add(firstPoint);
    
    var throughPoint = new Point(150, 175);
    var toPoint = new Point(250, 200);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 150), "Sad");
    
    return g;
}

function infinity() {
    var paths = [];
    
    var path = new Path();
    var firstPoint = new Point(50, 150);
    path.add(firstPoint);
    
    var throughPoint = new Point(100, 100);
    var toPoint = new Point(150, 150);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(200, 200);
    toPoint = new Point(250, 150);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(200, 100);
    toPoint = new Point(150, 150);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(100, 200);
    toPoint = new Point(50, 150);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 50), "Infinity");
    
    return g;
}

function swan() {
    var paths = [];
    
    var path = new Path();
    var firstPoint = new Point(50, 50);
    path.add(firstPoint);
    
    var throughPoint = new Point(75, 25);
    var toPoint = new Point(100, 50);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(125, 25);
    toPoint = new Point(150, 50);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(175, 25);
    toPoint = new Point(200, 50);
    path.arcTo(throughPoint, toPoint);
    
    path.add(new Point(225, 250));
    
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(100, 150), "Swan Dive");
    
    return g;
}

function jump() {
    var paths = [];
    
    var path = new Path();
    var firstPoint = new Point(50, 50);
    path.add(firstPoint);
    
    var throughPoint = new Point(75, 25);
    var toPoint = new Point(100, 50);
    path.arcTo(throughPoint, toPoint);
    
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(100, 150), "Jump");
    
    return g;
}

function doubleJump() {
    var paths = [];
    
    var path = new Path();
    var firstPoint = new Point(50, 50);
    path.add(firstPoint);
    
    var throughPoint = new Point(75, 25);
    var toPoint = new Point(100, 50);
    path.arcTo(throughPoint, toPoint);
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(125, 25);
    toPoint = new Point(150, 50);
    path.arcTo(throughPoint, toPoint);
    
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(100, 150), "Double Jump");
    
    return g;
}

function glasses() {
    var paths = [];
    
    var path = new Path();
    var firstPoint = new Point(50, 150);
    path.add(firstPoint);
    
    var throughPoint = new Point(100, 100);
    var toPoint = new Point(150, 150);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(200, 200);
    toPoint = new Point(250, 150);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(200, 100);
    toPoint = new Point(150, 150);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(100, 200);
    toPoint = new Point(50, 150);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    path = new Path();
    var firstPoint = new Point(50, 250);
    path.add(firstPoint);
    
    var throughPoint = new Point(150, 275);
    var toPoint = new Point(250, 250);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 50), "Glasses");
    
    return g;
}

function love() {
    var paths = [];
    
    var path = new Path();
    var firstPoint = new Point(150, 75);
    path.add(firstPoint);
    
    var throughPoint = new Point(120, 25);
    var toPoint = new Point(50, 125);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(125, 200);
    toPoint = new Point(150, 250);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    
    
    path = new Path();
    firstPoint = new Point(150, 75);
    path.add(firstPoint);
    
    throughPoint = new Point(180, 25);
    toPoint = new Point(250, 125);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(175, 200);
    toPoint = new Point(150, 250);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 100), "Love");
    
    return g;
}

function snake() {
    var paths = [];
    
    var path = new Path();
    var firstPoint = new Point(150, 50);
    path.add(firstPoint);
    
    var throughPoint = new Point(100, 100);
    var toPoint = new Point(150, 150);
    path.arcTo(throughPoint, toPoint);
    
    
    firstPoint = toPoint;
    path.add(firstPoint);
    
    throughPoint = new Point(200, 200);
    toPoint = new Point(150, 250);
    path.arcTo(throughPoint, toPoint);
    paths.push(path);
    
    var g = new Gesture();
    g.create(paths, new Point(150, 100), "Snake");
    
    return g;
}

/**
 * This function helps us with debugging.  We can stop and start
 * the animation whenever the user clicks the mouse.
 */
function onMouseUp(event) {
    started = !started;
}

/**
 * This function initializes our script.
 */
function init() {
    gestures.push(swipe());
    gestures.push(zoom());
    gestures.push(pinch());
    gestures.push(scroll());
    gestures.push(rotate());
    gestures.push(snake());
    gestures.push(happy());
    gestures.push(sad());
    gestures.push(wink());
    gestures.push(alien());
    gestures.push(square());
    gestures.push(love());
    gestures.push(infinity());
    gestures.push(glasses());
    gestures.push(jump());
    gestures.push(doubleJump());
    gestures.push(swan());
    
    gesture = gestures[0];
    gesture.draw();
    
    $('#next').click(function(evt) {
        evt.preventDefault();
        next();
    });
    
    $('#back').click(function(evt) {
        evt.preventDefault();
        back();
    });
    
    $('#replay').click(function(evt) {
        evt.preventDefault();
        gesture.replay();
        started = true;
    });
}

function next() {
    gesture.hide();
    gIndex++;
    
    if (gIndex < gestures.length) {
        gesture = gestures[gIndex];
        gesture.draw();
        started = true;
    }
    
}

function back() {
    gesture.hide();
    gIndex--;
    
    if (gIndex >= 0) {
        gesture = gestures[gIndex];
        gesture.replay();
        started = true;
    }
    
}

/**
 * This function is called with each frame of the animation.
 */
function onFrame(event) {
    if (started) {
        gesture.bump(); 
    } 
}

init();
